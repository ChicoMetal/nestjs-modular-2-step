scalar ScalarName
scalar DateTime

interface BaseModel {
  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime
}

type CommonAttributes {
  name: String
  description: String
}

type BaseModelAttributes {
  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime
}

type Product implements BaseModel {
  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime

  name: String
  description: String
  price: Int
  stock: Int
  image: URL
  categoryId: ID!
  category: Category
}

input ProductCreateInput {
  name: String!
  description: String!
  price: Int!
  stock: Int!
  image: URL!
  categoryId: ID!
}

input ProductUpdateInput {
  name: String
  description: String
  price: Int
  stock: Int
  image: URL
}


type Brand implements BaseModel {
  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime

  name: String
  description: String
  image: URL
}

input BrandCreateInput {
  name: String!
  description: String!
  image: URL!
}

input BrandUpdateInput {
  name: String
  description: String
  image: String
}

type Category implements BaseModel {
  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime

  name: CategoryNameType
  description: String
  products: [Product!]!
}

input CategoryCreateInput {
  name: CategoryNameType!
  description: String!
}

input CategoryUpdateInput {
  name: CategoryNameType
  description: String
}


type User implements BaseModel {

  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime

  email: EmailAddress!
  password: String!
  role: String!
}

input UserCreateInput {
  email: EmailAddress!
  password: String!
  role: String!
}

input UserUpdateInput {
  email: EmailAddress
  password: String
  role: String
}

type UserResponse {
  id: ID!
  createAt: DateTime!
  updateAt: DateTime
  deleteAt: DateTime

  email: EmailAddress!
  role: String!
}

type AuthResponse {
  access_token: String!
  user: UserResponse!
}

input LoginInput {
  userName: String
  password: String
}


type Query {
  products: [Product]!
  product(id: ID!): Product
  categories: [Category]!
  category(id: ID!): Category
  brands: [Brand]!
  brand(id: ID!): Brand!,
  testList(elements: [Int!]!): [Int]!
  users: [User]!
  user(id: ID!): User
  productsByCategory: [Product!]!
  categoriesByProduct: Category!
}

type Mutation {
  addProduct(data: ProductCreateInput!): Product
  updateProduct(id: ID!, data: ProductUpdateInput!): Product
  deleteProduct(id: ID!): ID
  addBrand(data: BrandCreateInput!): Brand
  updateBrand(id: ID!, data: BrandUpdateInput!): Brand
  deleteBrand(id: ID!): ID
  addCategory(data: CategoryCreateInput!): Category
  updateCategory(id: ID!, data: CategoryUpdateInput!): Category
  deleteCategory(id: ID!): ID
  addUser(data: UserCreateInput!): User
  updateUser(id: ID!, data: UserUpdateInput!): User
  deleteUser(id: ID!): ID
  login(loginUserInput: LoginInput!): AuthResponse,
  signUp(loginUserInput: LoginInput!): User
}

scalar CategoryNameType
